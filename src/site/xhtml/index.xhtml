<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2011, Everit Kft.

    All rights reserved.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
    MA 02110-1301  USA

-->
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<body>
	<h1>The test runner OSGi bundle</h1>
	<h2>Introduction</h2>
	<p>Very often the developers have to write lots of emulation code
		just to test a function. Writing mocks makes development slow and
		painful. We think that the tests should run on a system that is
		similar to the server where the application will finally run except
		that there are maybe emulated smtp servers, embedded databases, etc.</p>
	<p>With the maven-eosgi-plugin it is possible to set up such a test
		system. With this module it is possible to run the tests on the test
		system and see the changes without a restart.</p>

	<h2>Writing tests</h2>
	After dropping this bundle with it's dependencies into the OSGi
	container the written tests need to meet the followings:
	<ul>
		<li><p>The tests have to be provided as OSGi services</p></li>
		<li><p>The services have to have the service property
				(osgitest.junit4)</p></li>
		<li><p>The JUnit annotations (like @Test) should be placed
				into the interfaces that the services is provided with.</p></li>
		<li><p>The classes where that implement the interfaces should
				not contain any JUnit annotation.</p></li>
		<li><p>If you provide multiple test services with the same
				interfaces you should define the (service.id=XX) service property
				where XX is a unique id. This is important if you want to run your
				tests with maven-eosgi-plugin later as it needs a unique id or
				interface for every tests.</p></li>
	</ul>
	<p>As you can see this solution uses JUnit4 a bit differently from
		the ordinary ones. JUnit does not instantiate any object here but they
		are provided as OSGi services already. This is good as you can fill
		the properties of your OSGi service with any technology you like.</p>

	<h2>Running the tests during compilation</h2>
	<p>The Maven OSGi plugin supports running your tests during the
		integration-test phase of your project. In case the Maven plugin
		started the OSGi container (known from environment variables):</p>
	<ul>
		<li><p>The results of the tests will be written to the folder
				that is defined by the plugin as JUnit XML and TXT files.</p></li>
		<li><p>The server is stopped after all tests ran. The
				testrunner module thinks that all tests ran when:</p>
			<ul>
				<li><p>the framework bundle is in STARTED state</p></li>
				<li><p>there is no pending Blueprint event</p></li>
				<li><p>all caughed OSGi services were ran by JUnit</p></li>
			</ul></li>
	</ul>
	<p>When all tests ran the system is stopped by the testrunner
		module. This is done with the following steps:</p>
	<ul>
		<li><p>stop and waitForStop is called on the framework bundle</p></li>
		<li><p>All non-deamon threads with their stacktraces are
				dumped into a shutdown-error.txt file in the folder specified by the
				maven plugin. Currently the testrunner waits for max five seconds
				after the framework is stopped as sometimes non-deamon threads need
				a really little time to finish.</p></li>
		<li><p>System exit is called</p></li>
	</ul>
	<p>The maven plugin fails the integration tests if any non-daemon
		thread is running after the OSGi framework is stopped. The simple
		reason is that nobody wants solution where some resources are not
		freed when the bundle that created the resource is uninstalled. A
		typical mistake can be when there is no close method called during
		stopping the bundle on a BasicDataSource that was created by the
		bundle during starting.</p>
	<p>
		For more information please see the <a
			href="http://everit.org/osgi/dev/maven-eosgi-plugin/usage.html">
			plugin usage site</a>.
	</p>
	<h2>Test Driven Development with the testrunner module</h2>
	<p>
		To pick up the first steps please read our <a
			href="http://everit.org/osgi/dev/step-by-step-guide.html">step-by-step</a>
		guide.
	</p>
	<h2>Will be another test frameworks supported?</h2>
	<p>We were thinking of it. That is the reason why in the service
		property the junit4 engine has to be defined. However, this is not top
		priority.</p>
</body>
</html>